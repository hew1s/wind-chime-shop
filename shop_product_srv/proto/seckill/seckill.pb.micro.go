// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/seckill/seckill.proto

package shop_product_srv

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SecKills service

func NewSecKillsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SecKills service

type SecKillsService interface {
	SecKillList(ctx context.Context, in *SecKillsRequest, opts ...client.CallOption) (*SecKillsResponse, error)
	SecKillAdd(ctx context.Context, in *AddSecKillRequest, opts ...client.CallOption) (*AddSecKillResponse, error)
	SecKillDel(ctx context.Context, in *DelSecKillRequest, opts ...client.CallOption) (*AddSecKillResponse, error)
	SecKillById(ctx context.Context, in *DelSecKillRequest, opts ...client.CallOption) (*SecKillEditData, error)
	SecKillEdit(ctx context.Context, in *SecKillEditRequest, opts ...client.CallOption) (*AddSecKillResponse, error)
}

type secKillsService struct {
	c    client.Client
	name string
}

func NewSecKillsService(name string, c client.Client) SecKillsService {
	return &secKillsService{
		c:    c,
		name: name,
	}
}

func (c *secKillsService) SecKillList(ctx context.Context, in *SecKillsRequest, opts ...client.CallOption) (*SecKillsResponse, error) {
	req := c.c.NewRequest(c.name, "SecKills.SecKillList", in)
	out := new(SecKillsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillsService) SecKillAdd(ctx context.Context, in *AddSecKillRequest, opts ...client.CallOption) (*AddSecKillResponse, error) {
	req := c.c.NewRequest(c.name, "SecKills.SecKillAdd", in)
	out := new(AddSecKillResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillsService) SecKillDel(ctx context.Context, in *DelSecKillRequest, opts ...client.CallOption) (*AddSecKillResponse, error) {
	req := c.c.NewRequest(c.name, "SecKills.SecKillDel", in)
	out := new(AddSecKillResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillsService) SecKillById(ctx context.Context, in *DelSecKillRequest, opts ...client.CallOption) (*SecKillEditData, error) {
	req := c.c.NewRequest(c.name, "SecKills.SecKillById", in)
	out := new(SecKillEditData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillsService) SecKillEdit(ctx context.Context, in *SecKillEditRequest, opts ...client.CallOption) (*AddSecKillResponse, error) {
	req := c.c.NewRequest(c.name, "SecKills.SecKillEdit", in)
	out := new(AddSecKillResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SecKills service

type SecKillsHandler interface {
	SecKillList(context.Context, *SecKillsRequest, *SecKillsResponse) error
	SecKillAdd(context.Context, *AddSecKillRequest, *AddSecKillResponse) error
	SecKillDel(context.Context, *DelSecKillRequest, *AddSecKillResponse) error
	SecKillById(context.Context, *DelSecKillRequest, *SecKillEditData) error
	SecKillEdit(context.Context, *SecKillEditRequest, *AddSecKillResponse) error
}

func RegisterSecKillsHandler(s server.Server, hdlr SecKillsHandler, opts ...server.HandlerOption) error {
	type secKills interface {
		SecKillList(ctx context.Context, in *SecKillsRequest, out *SecKillsResponse) error
		SecKillAdd(ctx context.Context, in *AddSecKillRequest, out *AddSecKillResponse) error
		SecKillDel(ctx context.Context, in *DelSecKillRequest, out *AddSecKillResponse) error
		SecKillById(ctx context.Context, in *DelSecKillRequest, out *SecKillEditData) error
		SecKillEdit(ctx context.Context, in *SecKillEditRequest, out *AddSecKillResponse) error
	}
	type SecKills struct {
		secKills
	}
	h := &secKillsHandler{hdlr}
	return s.Handle(s.NewHandler(&SecKills{h}, opts...))
}

type secKillsHandler struct {
	SecKillsHandler
}

func (h *secKillsHandler) SecKillList(ctx context.Context, in *SecKillsRequest, out *SecKillsResponse) error {
	return h.SecKillsHandler.SecKillList(ctx, in, out)
}

func (h *secKillsHandler) SecKillAdd(ctx context.Context, in *AddSecKillRequest, out *AddSecKillResponse) error {
	return h.SecKillsHandler.SecKillAdd(ctx, in, out)
}

func (h *secKillsHandler) SecKillDel(ctx context.Context, in *DelSecKillRequest, out *AddSecKillResponse) error {
	return h.SecKillsHandler.SecKillDel(ctx, in, out)
}

func (h *secKillsHandler) SecKillById(ctx context.Context, in *DelSecKillRequest, out *SecKillEditData) error {
	return h.SecKillsHandler.SecKillById(ctx, in, out)
}

func (h *secKillsHandler) SecKillEdit(ctx context.Context, in *SecKillEditRequest, out *AddSecKillResponse) error {
	return h.SecKillsHandler.SecKillEdit(ctx, in, out)
}
